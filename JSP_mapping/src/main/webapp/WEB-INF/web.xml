<?xml version="1.0" encoding="UTF-8"?> 
 <web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 		  xmlns="http://xmlns.jcp.org/xml/ns/javaee"
 		  xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
 		  id="WebApp_ID" version="4.0"
 		  metadata-complete="true" >
 		  
  <display-name>JSP_mapping</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.jsp</welcome-file>
    <welcome-file>default.htm</welcome-file>
  </welcome-file-list>
  
 	
 	<servlet> <!--  서블릿 등록 -->
 		<servlet-name>addServlet1</servlet-name>
 		<servlet-class> controller.AddServlet1</servlet-class>
 	</servlet>
 	
 	<servlet-mapping> <!--  서블릿 요청과 연결 설정  -->
 		<servlet-name>addServlet1</servlet-name>
 		<url-pattern>/add1</url-pattern>
 	
 	</servlet-mapping>
 	
 	<servlet> <!--  서블릿 등록 -->
 		<servlet-name>addServlet2</servlet-name>
 		<servlet-class> controller.AddServlet2</servlet-class>
 	</servlet>
 	
 	<servlet-mapping> <!--  서블릿 요청과 연결 설정  -->
 		<servlet-name>addServlet2</servlet-name>
 		<url-pattern>/add2</url-pattern>
 	
 	</servlet-mapping>
 	
 	<servlet> <!--  서블릿 등록 -->
 		<servlet-name>FrontController</servlet-name>
 		<servlet-class> controller.FrontController</servlet-class>
 	</servlet>
 	
 	<servlet-mapping> <!--  서블릿 요청과 연결 설정  -->
 		<servlet-name>FrontController</servlet-name>
 		<url-pattern>/</url-pattern>
 	
 	</servlet-mapping>
 	
</web-app>
<!--  

	FrontController를 만들어서 모든 요청을 받는 서블릿을 정의하고 등록 
	url매핑 / 를 이용하여 하나의 서블릿이 모든 요청을 받음 
	요청 url 또는 파라미터로 전달된 명령을 이용하여 처리할 비즈니스 로직을 선택
	FrontController에서 요청을 분석하고 비즈니스 로직 처리 후 브라우저에 응 답 또는
	적절한 뷰를 선택하여 응답한다. 

	실제 서비스를을 이용해서 처리하는 내용! 
	처리하기 위해서 연결을 시켜주는 걸 핸들러 
	실제 결과를 가지고 보여지는 내용을 action


 -->


<!-- xml파일 

	톰캣 에러! 
	Server Tomcat v9.0 Server at localhost failed to start
	1. xml파일에서 지정한 매핑하고 @webServlet(이름) 겹치지 않는지
	  어떤 방식을 사용할 것인지 어노테이션을 할 경우에는 false일 경우에는 xml파일
	  서블릿매핑 경로를 두개 다 참조하기 때문에 충돌 난다.
	  
	2. 서버를 삭제 후 다시 설정 
	3. 버전확인 톰캣 버전하고 실제 jdk버전 확인 
	


	
	xml파일을 만들어서 사용시 다른 자바의 어노테이션들이 제대로 매칭이 일어나지 
	않는 경우가 있다. 

	metadata-complete="false" 어노테이션 @
					  "true"  web.xml 방식 
					 	
	

	jsp 나 servlet을 위한 설정파일을 담당하는 역할 
	브라우저가 실행 할 때 반드시 거쳐가는 특징을 지니고 있는 설정 파일을 담당한다. 
	
	매핑하는 이유 (url안에 주소가 자세하게 정의 되어있으면 웹사이트의 구조를 
	            파악할 수 있고 이것은 보안성을 낮게 만든다.  )
	            긴 주소를 간결하게 만들기 위해서 매핑
	
	
	1. 어노테이션을 이용한 매핑
	
	2. xml파을 이용한 매핑 
	

 
  
   서블릿과 서블릿 메핑이 짝을 이룰 수 있도록 같은  이름을 써준다. 
  		servlet이름은 아무거나 써도 상관없지만 대부분 연결되는 서블릿클래스명으로
  		써준다. 
  	
  	<servlet-name>Login</servlet-name>
  	
  	  mapping 할 class를 "패키지명.클래스이름"형식으로 작성  
  	<servlet-class>servlet.Login</servlet-class>
  	
  </servlet>
  <servlet-mapping>
  	<servlet-name>Login</servlet-name>
  	 클래스이름 대신 웹 브라우저에서 요청하는 이름 
  	<url-pattern>/first</url-pattern>
  </servlet-mapping>   
 	-->
<?xml version="1.0" encoding="UTF-8" ?>
<!-- DOCTYPE이 sqlMap인 xml 파일은 처리할 SQL 명령을 기억하는 xml 파일이다. -->
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="com.kh.vo.GuestbookVO">
	<!-- id: SQL 명령을 식별한다. -->
	<!-- parameterClass: SQL 명령으로 DAO 클래스에서 전달되는 데이터의 타입을 적는다. -->
	<!-- resultClass: SQL 명령문이 실행되고 DAO 클래스로 리턴되는 데이터의 타입을 적는다. -->

	<!-- 글 1건을 저장한다. -->
	<insert id="insert" parameterClass="vo">
		insert into guestbook (idx,
		name, password, memo, ip)
		values (guestbook_idx_seq.nextval, #name#, #password#, #memo#, #ip#)
	</insert>

	<!-- 전체 글의 개수를 얻어온다. -->
	<select id="selectCount" resultClass="int">
		select count(*) from
		guestbook
	</select>

	<!-- 1페이지 분량의 글 목록을 얻어온다. -->
	<select id="selectList" parameterClass="java.util.HashMap"
		resultClass="vo">
		<!-- mysql -->
		<!-- select * from guestbook order by idx desc limit #startNo#, #pageSize# -->
		<!-- <![CDATA[ ~ ]]> 사이에 입력한 내용은 무조건 문자열로 취급된다. -->
		<![CDATA[
		select * from (
			select rownum rnum, TT.* from (
				select * from guestbook order by idx desc
			) TT where rownum <= #endNo#
		) where rnum >= #startNo#
		]]>
	</select>

	<!-- 글 1건 얻어온다 -->
	<select id="selectByIdx" parameterClass="int" resultClass="vo">
		select * from guestbook where idx=#idx#
	</select>

	<!-- 글 1건 삭제한다 -->
	<delete id="delete" parameterClass="int">
		delete from guestbook where
		idx=#idx#
	</delete>

	<!-- 글 1건 수정한다 -->
	<update id="update" parameterClass="vo">
		update guestbook
		set name=#name#,memo=#memo#
		where idx=#idx#
	</update>


	<!-- 카테고리별 검색어를 포함하는 글의 개수를 얻어온다~ 동적쿼리 사용 ibatis는 기본적으로 동적태그를 지원을 한다. <isEqual>태그를 
		사용해 sql명령의 실행조건을 지정할 수 있다~ property 속성에는 parameterClass로 넘어오는 조건을 비교할 필드 
		이름을 적는다 compareValue 속성에는 property속성에 지정한 필드와 비교할 값을 적는다. -->
	<select id="selectCountMulti" parameterClass="param"
		resultClass="int">
		<isEqual property="category" compareValue="내용">
			memo like '%'||#item#||'%'
		</isEqual>
		<isEqual property="category" compareValue="이름">
			name like '%'||#item#||'%'
		</isEqual>
		<isEqual property="category" compareValue="내용+이름">
			memo like '%'||#item#||'%' or name like '%'||#item#||'%'
		</isEqual>
	</select>

	<!-- 카테고리별로 검색어를 포함하는 1페이지 분량의 글목록을 얻어온다 -->
	<select id="selectListMulti" parameterClass="param"
		resultClass="vo">
		select * from (
			select rownum rnum, TT.* from (
				select * from guestbook
					<isEqual property="category" compareValue="내용">
				 		memo like '%'||#item#||'%'
				 	</isEqual>
				 	<isEqual property="category" compareValue="이름">
				 		name like '%'||#item#||'%'
				 	</isEqual>
				 	<isEqual property="category" compareValue="내용+이름">
				 		memo like '%'||#item#||'%' or name like '%'||#item#||'%'
				 	</isEqual>
				 	
				 	order by idx desc
		<![CDATA[
			) TT where rownum <= #endNo#
		) where 
				rnum >= #startNo#
		]]>
	</select>






	<!-- 메모필드에 검색어가 포함된 글의 개수를 얻어온다 오라클:like '%'|| #검색어# || '%' mysql:like concat('%',#검색어#,'%') -->


	<!-- 메모(내용)필드에 검색어가 포함된 1페이지 분량의 글목록을 얻어온다~ -->

	<!-- name필드 검색어가 포함된 글의 개수를 얻어온다 -->
	<!-- name필드 검색어가 포함된 1페이지 분량의 글목록을 얻어온다~ -->

	<!-- 내용하고 name 둘 다 포함된 글의개수 얻어온다 -->

	<!-- 내용+name필드 검색어가 포함된 1페이지 분량의 글목록을 얻어온다~ -->




















</sqlMap>

